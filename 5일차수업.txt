생성자 
 - 클래스 이름과 동일한 메소드
 - 반환형이 없다(void조차 없다)
 - 멤버필드의 초기값을 주기 위해 만든다
 - 생성자를 구현하지 않으면 JVM이 default생성자를 만들어 낸다
 - 생성자가 하나라도 구현이 되었으면 default생성자 안만든다
 - 생성자도 메소드의 일부라서 오버로딩이 가능하다
 - 객체생성시 딱 한번 호출되는 메소드. 따라서, 직접 호출해서 사용 불가

접근제한자
 - private		: 클래스 내부에서만 접근 가능
 - default		: 같은 폴더(같은 패키지)에서 접근 가능, 아무것도 적지 않으면...
 - protected	: 상속관계에서는 public처럼, 상속관계 아니면 default처럼 접근가능
 - public		: 누구나 접근 가능

객체지향언어 4가지 속성
- 은닉화 : 멤버를 숨긴다. 자바에서는 private 선언
- 상속성
- 다형성
- 추상화

지정예약어
class
 - static		: 중첩클래스의 하나
 - final		: 이클래스는 상속하지 않겠다
 - abstract	: 추상화 클래스

field
 - static		: 정적, 공용의, 공통적인
 - final		: 이 멤버는 객체를 생성할때까지 한번 초기값을 주고, 바꾸지는 못한다
 - static final	: 상수선언
 - transient	: 네트워크나 I/O에서 필드값을 전송하지 않겠다

method
 - static		: field의 static과 동일, 안에서는 static멤버만 호출 가능
 - final		: 상속이나 익명중첩클래스에서 메소드 오버라이드 못하게 하는 기능
 - static final	: 메소드에서는 잘 사용되지 않는다. static기능과 final기능을 합친 기능
 - synchronized	: 동기화, 멀티스레드
 - abstract	: 추상화 메소드
 - native		: 다른언어(c++)에서 만든 기능을 가져와 사용하고자 할때


중첩클래스
 - 일반중첩클래스
 - static중첩클래스
 - 지역중첩클래스
 - 익명중첩클래스















